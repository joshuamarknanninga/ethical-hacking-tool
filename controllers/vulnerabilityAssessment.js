const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const axios = require('axios'); // For interacting with OpenVAS API
const xml2js = require('xml2js'); // For parsing XML reports
const { ChartJSNodeCanvas } = require('chartjs-node-canvas'); // For generating charts
const { escape } = require('shell-escape'); // Sanitize input

// Function to save vulnerability scan results to a file
const saveVulnerabilityReport = (scanResults, target, format = 'txt') => {
  const reportFilePath = path.join(__dirname, `../reports/vulnerability_report_${target}_${Date.now()}.${format}`);
  fs.writeFileSync(reportFilePath, scanResults);
  return reportFilePath;
};

// Function to generate vulnerability severity charts
const generateSeverityChart = async (severityData, target) => {
  const width = 800;
  const height = 600;
  const chartCanvas = new ChartJSNodeCanvas({ width, height });

  const configuration = {
    type: 'pie',
    data: {
      labels: ['Low', 'Medium', 'High', 'Critical'],
      datasets: [{
        data: [
          severityData.low || 0,
          severityData.medium || 0,
          severityData.high || 0,
          severityData.critical || 0
        ],
        backgroundColor: ['#36A2EB', '#FFCE56', '#FF6384', '#C45850'],
        hoverBackgroundColor: ['#36A2EB', '#FFCE56', '#FF6384', '#C45850'],
      }]
    },
    options: {
      title: {
        display: true,
        text: `Vulnerability Severity Breakdown for ${target}`
      }
    }
  };

  const imageBuffer = await chartCanvas.renderToBuffer(configuration);
  const chartPath = path.join(__dirname, `../reports/severity_chart_${target}_${Date.now()}.png`);
  fs.writeFileSync(chartPath, imageBuffer);
  return chartPath;
};

// Function to parse JSON or XML report for detailed results and severity breakdowns
const parseVulnerabilityReport = (report, format) => {
  return new Promise((resolve, reject) => {
    if (format === 'json') {
      try {
        const parsedJson = JSON.parse(report);
        const severityData = { low: 0, medium: 0, high: 0, critical: 0 };

        // Parse vulnerability severities from JSON
        parsedJson.vulnerabilities.forEach(vuln => {
          switch (vuln.severity) {
            case 'Low':
              severityData.low++;
              break;
            case 'Medium':
              severityData.medium++;
              break;
            case 'High':
              severityData.high++;
              break;
            case 'Critical':
              severityData.critical++;
              break;
            default:
              break;
          }
        });

        resolve({ parsedJson, severityData });
      } catch (err) {
        reject(`Error parsing JSON report: ${err.message}`);
      }
    } else if (format === 'xml') {
      const parser = new xml2js.Parser();
      parser.parseString(report, (err, result) => {
        if (err) {
          return reject(`Error parsing XML report: ${err.message}`);
        }

        const severityData = { low: 0, medium: 0, high: 0, critical: 0 };
        // Parse vulnerability severities from XML
        const vulnerabilities = result.report.vulnerability || [];
        vulnerabilities.forEach(vuln => {
          const severity = vuln.severity[0];
          switch (severity) {
            case 'Low':
              severityData.low++;
              break;
            case 'Medium':
              severityData.medium++;
              break;
            case 'High':
              severityData.high++;
              break;
            case 'Critical':
              severityData.critical++;
              break;
            default:
              break;
          }
        });

        resolve({ parsedJson: result, severityData });
      });
    } else {
      resolve(report); // Return plain text report
    }
  });
};

// Function to perform vulnerability assessment using OpenVAS with customizable options
const vulnerabilityAssessment = async (target, scanOptions = {}) => {
  return new Promise((resolve, reject) => {
    // Sanitize target to prevent command injection
    const safeTarget = escape([target]);

    // Construct OpenVAS command with customizable scan options
    let command = `openvas -q -T ${safeTarget}`;

    if (scanOptions.scanType) {
      command += ` --scan-type ${scanOptions.scanType}`;
    }
    if (scanOptions.reportFormat) {
      command += ` --format ${scanOptions.reportFormat}`;
    }

    exec(command, async (error, stdout, stderr) => {
      if (error) {
        return reject(`Error during vulnerability assessment: ${stderr}`);
      }

      // Save the raw scan results
      const reportFormat = scanOptions.reportFormat || 'txt';
      const reportFilePath = saveVulnerabilityReport(stdout, safeTarget, reportFormat);

      // Parse the results (e.g., JSON or XML)
      const { parsedJson, severityData } = await parseVulnerabilityReport(stdout, reportFormat);

      // Generate severity chart
      const chartPath = await generateSeverityChart(severityData, safeTarget);

      resolve(`Vulnerability assessment for ${safeTarget} completed. Severity chart saved at: ${chartPath}. Full report saved at: ${reportFilePath}`);
    });
  });
};

// Function to handle API rate limiting and retries for OpenVAS API
const apiRequestWithRetry = async (url, options, maxRetries = 3) => {
  let attempt = 0;
  while (attempt < maxRetries) {
    try {
      const response = await axios(url, options);
      return response;
    } catch (error) {
      if (error.response && error.response.status === 429) {
        // Handle rate limit (retry after waiting)
        const retryAfter = parseInt(error.response.headers['retry-after'] || 1, 10) * 1000;
        await new Promise(resolve => setTimeout(resolve, retryAfter));
      } else if (attempt === maxRetries - 1) {
        throw new Error(`API request failed after ${maxRetries} attempts: ${error.message}`);
      }
    }
    attempt++;
  }
};

// Function to initiate a scan through the OpenVAS API
const openvasApiAssessment = async (target, apiUrl, apiToken, scanProfile = 'Full and Fast') => {
  try {
    // Create the scan request payload
    const payload = {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiToken}`,
        'Content-Type': 'application/json',
      },
      data: {
        target,
        profile: scanProfile,
      }
    };

    // Send request to initiate the scan (with rate-limiting support)
    const scanResponse = await apiRequestWithRetry(`${apiUrl}/scans`, payload);
    const scanId = scanResponse.data.scan_id;

    return `OpenVAS API assessment initiated for ${target}. Scan ID: ${scanId}`;
  } catch (error) {
    throw new Error(`Error initiating OpenVAS API scan: ${error.message}`);
  }
};

// Function to fetch detailed scan report via OpenVAS API
const fetchOpenvasApiReport = async (scanId, apiUrl, apiToken, format = 'json') => {
  try {
    // Fetch the report via API (with rate-limiting support)
    const response = await apiRequestWithRetry(`${apiUrl}/scans/${scanId}/report`, {
      headers: {
        'Authorization': `Bearer ${apiToken}`,
      }
    });

    // Parse the report based on the format
    const { parsedJson, severityData } = await parseVulnerabilityReport(response.data, format);

    // Generate severity chart
    const chartPath = await generateSeverityChart(severityData, scanId);

    // Save the report to a file
    const reportFilePath = saveVulnerabilityReport(response.data, scanId, format);

    return `Vulnerability assessment report for Scan ID: ${scanId} fetched. Severity chart saved at: ${chartPath}. Full report saved at: ${reportFilePath}`;
  } catch (error) {
    throw new Error(`Error fetching OpenVAS API report: ${error.message}`);
  }
};

module.exports = { vulnerabilityAssessment, openvasApiAssessment, fetchOpenvasApiReport };
